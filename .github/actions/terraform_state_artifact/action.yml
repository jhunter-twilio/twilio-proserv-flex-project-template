name: 'terraform_state_artifact'
description: 'Sets up and runs Terraform, and creates an encrypted Terraform artifact'
author: 'Sturla Bragason'
inputs:
  encryptionkey:
    description: 'Used to read artifact and as a key to encrypt and decrypt the state file artifact'
    required: true
  apply:
    description: 'terraform apply'
    required: false
    default: true
  custom_plan_flags:
    description: 'Add custom flags to the terraform plan command'
    required: false
    default: ''
  custom_apply_flags:
    description: 'Add custom flags to the terraform apply command'
    required: false
    default: ''
  path:
    description: 'Terraform configuration path'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
    - id: terraform
      working-directory: ${{ inputs.path }}
      run: |

        $Repo = "${{ github.repository }}"
        $BaseUri = "https://api.github.com"
        $ArtifactUri = "$BaseUri/repos/$Repo/actions/artifacts"
        $Token = "${{ github.token }}" | ConvertTo-SecureString -AsPlainText
        $RestResponse = Invoke-RestMethod -Authentication Bearer -Uri $ArtifactUri -Token $Token | Select-Object -ExpandProperty artifacts
        if ($RestResponse){
          $MostRecentArtifactURI = $RestResponse | Sort-Object -Property created_at -Descending | where name -eq "terraformstatefile" | Select-Object -First 1 | Select-Object -ExpandProperty archive_download_url
          Write-Host "Most recent artifact URI = $MostRecentArtifactURI"
          if ($MostRecentArtifactURI){
            Invoke-RestMethod -uri $MostRecentArtifactURI -Token $Token -Authentication bearer -outfile ./state.zip
            Expand-Archive ./state.zip
            openssl enc -d -in ./state/terraform.tfstate.enc -aes-256-cbc -pbkdf2 -pass pass:"${{ inputs.encryptionkey }}" -out ./terraform.tfstate
          }
        }

        $tfdir = "${{ inputs.path }}"

        npm install -g twilio-cli

        terraform init
        
        #############################################################################
        ### THE FOLLOWING CAPTURES THE SIDS FROM THE ENVIRONMENT AND IMPORTS THEM
        ### INTO TERRAFORM IF THEY EXIST 
        #############################################################################

        ### SERVERLESS DOMAIN ###
        twilio api:serverless:v1:services:list | select-string "custom-flex-extensions-serverless" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_severless_sid_custom_flex
        twilio api:serverless:v1:services:list | select-string "schedule-manager" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_severless_sid_schedule_manager

        twilio api:serverless:v1:services:environments:list --service-sid $tf_severless_sid_custom_flex | select-string "dev-environment" | ForEach-Object { ([string]$_).Split(" ")[4] } | tee-object -variable TF_VAR_SERVERLESS_DOMAIN_CUSTOM_FLEX
        twilio api:serverless:v1:services:environments:list --service-sid $tf_severless_sid_schedule_manager | select-string "dev-environment" | ForEach-Object { ([string]$_).Split(" ")[4] } | tee-object -variable TF_VAR_SERVERLESS_DOMAIN_SCHEDULE_MANAGER

        $env:TF_VAR_SERVERLESS_DOMAIN_CUSTOM_FLEX = $TF_VAR_SERVERLESS_DOMAIN_CUSTOM_FLEX
        $env:TF_VAR_SERVERLESS_DOMAIN_SCHEDULE_MANAGER = $TF_VAR_SERVERLESS_DOMAIN_SCHEDULE_MANAGER

        ### TASK ROUTER ###

        # workspace
        twilio api:taskrouter:v1:workspaces:list | select-string "Flex Task Assignment" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_workspace_sid 

        if ($tf_workspace_sid) {
          terraform import module.routing.twilio_taskrouter_workspaces_v1.flex $tf_workspace_sid 
        }

        # workflows
        twilio api:taskrouter:v1:workspaces:workflows:list --workspace-sid $tf_workspace_sid | select-string "Assign To Anyone" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_workflow_sid_assign_to_anyone 
        twilio api:taskrouter:v1:workspaces:workflows:list --workspace-sid $tf_workspace_sid | select-string "Chat Transfer" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_workflow_sid_chat_transfer
        twilio api:taskrouter:v1:workspaces:workflows:list --workspace-sid $tf_workspace_sid | select-string "Callback" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_workflow_sid_callback 
        twilio api:taskrouter:v1:workspaces:workflows:list --workspace-sid $tf_workspace_sid | select-string "Internal Call" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_workflow_sid_internal_call 


        if ($tf_workflow_sid_assign_to_anyone) {
          terraform import module.routing.twilio_taskrouter_workspaces_workflows_v1.assign_to_anyone $tf_workspace_sid/$tf_workflow_sid_assign_to_anyone
        }

        if ($tf_workflow_sid_chat_transfer) {
          terraform import module.routing.twilio_taskrouter_workspaces_workflows_v1.chat_transfer $tf_workspace_sid/$tf_workflow_sid_chat_transfer
        }

        if ($tf_workflow_sid_callback) {
          terraform import module.routing.twilio_taskrouter_workspaces_workflows_v1.callback $tf_workspace_sid/$tf_workflow_sid_callback
        }

        if ($tf_workflow_sid_internal_call) {
          terraform import module.routing.twilio_taskrouter_workspaces_workflows_v1.internal_call $tf_workspace_sid/$tf_workflow_sid_internal_call
        }

        # queues
        twilio api:taskrouter:v1:workspaces:task-queues:list --workspace-sid $tf_workspace_sid | select-string "Everyone" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_queue_sid_everyone
        twilio api:taskrouter:v1:workspaces:task-queues:list --workspace-sid $tf_workspace_sid | select-string "Sales" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_queue_sid_sales
        twilio api:taskrouter:v1:workspaces:task-queues:list --workspace-sid $tf_workspace_sid | select-string "Support" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_queue_sid_support
        twilio api:taskrouter:v1:workspaces:task-queues:list --workspace-sid $tf_workspace_sid | select-string "Internal Calls" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_queue_sid_internal_calls


        if ($tf_queue_sid_everyone) {
          terraform import module.routing.twilio_taskrouter_workspaces_task_queues_v1.everyone $tf_workspace_sid/$tf_queue_sid_everyone
        }

        if ($tf_queue_sid_sales) {
          terraform import module.routing.twilio_taskrouter_workspaces_task_queues_v1.sales $tf_workspace_sid/$tf_queue_sid_sales
        }

        if ($tf_queue_sid_support) {
          terraform import module.routing.twilio_taskrouter_workspaces_task_queues_v1.support $tf_workspace_sid/$tf_queue_sid_support
        }

        if ($tf_queue_sid_internal_calls) {
          terraform import module.routing.twilio_taskrouter_workspaces_task_queues_v1.internal_calls $tf_workspace_sid/$tf_queue_sid_internal_calls
        }   

        # channels
        twilio api:taskrouter:v1:workspaces:task-channels:list --workspace-sid $tf_workspace_sid | select-string "Voice" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_task_channel_sid_voice
        twilio api:taskrouter:v1:workspaces:task-channels:list --workspace-sid $tf_workspace_sid | select-string "Chat" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_task_channel_sid_chat


        if ($tf_task_channel_sid_voice) {
          terraform import module.routing.twilio_taskrouter_workspaces_task_channels_v1.voice $tf_workspace_sid/$tf_task_channel_sid_voice
        }

        if ($tf_task_channel_sid_chat) {
          terraform import module.routing.twilio_taskrouter_workspaces_task_channels_v1.chat $tf_workspace_sid/$tf_task_channel_sid_chat
        }

        # activities
        twilio api:taskrouter:v1:workspaces:activities:list --workspace-sid $tf_workspace_sid | select-string "Offline" -CaseSensitive  | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_activity_offline
        twilio api:taskrouter:v1:workspaces:activities:list --workspace-sid $tf_workspace_sid | select-string "Available" -CaseSensitive | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_activity_available
        twilio api:taskrouter:v1:workspaces:activities:list --workspace-sid $tf_workspace_sid | select-string "Unavailable" -CaseSensitive | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_activity_unavailable
        twilio api:taskrouter:v1:workspaces:activities:list --workspace-sid $tf_workspace_sid | select-string "Break"  -CaseSensitive | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_activity_break
        twilio api:taskrouter:v1:workspaces:activities:list --workspace-sid $tf_workspace_sid | select-string "On A Task" -CaseSensitive  | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_activity_on_a_task

        if ($tf_activity_offline) {
          terraform import module.routing.twilio_taskrouter_workspaces_activities_v1.offline $tf_workspace_sid/$tf_activity_offline
        }

        if ($tf_activity_available) {
          terraform import module.routing.twilio_taskrouter_workspaces_activities_v1.available $tf_workspace_sid/$tf_activity_available
        }

        if ($tf_activity_unavailable) {
          terraform import module.routing.twilio_taskrouter_workspaces_activities_v1.unavailable $tf_workspace_sid/$tf_activity_unavailable
        }

        if ($tf_activity_on_a_task) {
          terraform import module.routing.twilio_taskrouter_workspaces_activities_v1.on_a_task $tf_workspace_sid/$tf_activity_on_a_task
        }



        ### STUDIO ###
        twilio api:studio:v2:flows:list | select-string "Voice IVR" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_flow_sid_voice_ivr
        twilio api:studio:v2:flows:list | select-string "Messaging Flow" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_flow_sid_messaging_flow
        twilio api:studio:v2:flows:list | select-string "Chat Flow" | ForEach-Object { ([string]$_).Split(" ")[0] } | tee-object -variable tf_flow_sid_chat_flow


        if ($tf_flow_sid_voice_ivr) {
          terraform import module.ivr.twilio_studio_flows_v2.voice $tf_flow_sid_voice_ivr
        }

        if ($tf_flow_sid_messaging_flow) {
          terraform import module.ivr.twilio_studio_flows_v2.messaging $tf_flow_sid_messaging_flow
        }

        if ($tf_flow_sid_chat_flow) {
          terraform import module.ivr.twilio_studio_flows_v2.chat $tf_flow_sid_chat_flow
        }

        #############################################################################
        ### END OF SID EVALUATION
        #############################################################################

        $terraformapply = "${{ inputs.apply }}"
        $custom_plan_flags = "${{ inputs.custom_plan_flags }}"
        $custom_apply_flags = "${{ inputs.custom_apply_flags }}"
        if ($terraformapply -eq "false"){
          $terraformapply = $false
        }
        terraform plan $custom_plan_flags
        if ($terraformapply){
          terraform apply -auto-approve $custom_apply_flags
        }
        $StateExists = Test-Path -Path ./terraform.tfstate -PathType Leaf
        if ($StateExists){
          openssl enc -in ./terraform.tfstate -aes-256-cbc -pbkdf2 -pass pass:"${{ inputs.encryptionkey }}" -out ./terraform.tfstate.enc
        }
      shell: pwsh
    - uses: actions/upload-artifact@v2
      with:
        name: terraformstatefile
        path: ./terraform.tfstate.enc
branding:
  icon: 'cloud'
  color: 'gray-dark'
