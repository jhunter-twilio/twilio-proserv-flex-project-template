on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      auto_serverless_deploy:
        required: true
        type: boolean
    secrets:
      TWILIO_ACCOUNT_SID:
        required: true
      TWILIO_API_KEY:
        required: true
      TWILIO_API_SECRET:
        required: true
      TF_ENCRYPTION_KEY:
        required: true

  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: environment
        description: "Environment to use for deployment"
      auto_serverless_deploy:
        required: true
        type: boolean
        description: Deploy serverless services?
jobs:
  terraform_deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    name: Deploy Terraform
    env:
      ENCRYPTION_KEY: ${{ secrets.TF_ENCRYPTION_KEY }}
      TF_STATE_FILES: ".terraform.lock.hcl|terraform.tfstate"
      ENVIRONMENT: ${{ inputs.environment }}
      TF_VAR_SERVERLESS_DEPLOY: ${{ inputs.auto_serverless_deploy }}
      SKIP_TF_INIT: false
    steps:
      - uses: actions/checkout@v3
      - name: set github environment variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: scripts/github-set-env.sh
      - uses: hashicorp/setup-terraform@v2
      - name: setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: install Twilio CLI
        run: |
          npm install -g twilio-cli
          twilio plugins:install @twilio-labs/plugin-serverless

      - name: Pull Terraform State
        working-directory: ./infra-as-code/state
        id: pull-state
        run: |
          ./pull_state.sh

      - name: Build serverless projects
        env:
          CI: false
        working-directory: ./services
        run: |
          echo "## Services" >> $GITHUB_STEP_SUMMARY
          SERVICE_FOLDERS=`ls -d */ | xargs -I{} echo $(pwd)/{}`
          for service_folder in $SERVICE_FOLDERS; do \
            if [ -d "$service_folder" ]; then
              echo "### :open_file_folder: $service_folder" >> $GITHUB_STEP_SUMMARY
              cd $service_folder
              yarn
              yarn build || echo "- :warning: No build script detected for $service_folder" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Detect serverless projects
        working-directory: ./infra-as-code/util
        run: |
          npm i
          npm run buildServiceManifest -- --servicesRoot=../../services
          echo "### Services Manifest" >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          cat ../../services/services-manifest.yaml >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### :warning: Missing env vars" >> $GITHUB_STEP_SUMMARY
          cat ../../services/services-manifest.yaml | grep missing >> $GITHUB_STEP_SUMMARY || echo "- No vars detected" >> $GITHUB_STEP_SUMMARY

      - name: Load script variables
        working-directory: ./infra-as-code/state
        run: |
          [ -s ../../services/services-manifest.yaml ]  || \
            export TF_VAR_SERVERLESS_DEPLOY=false && \
            echo "TF_VAR_SERVERLESS_DEPLOY=$TF_VAR_SERVERLESS_DEPLOY" >> "$GITHUB_ENV" && \
            echo "- :warning: Skipping auto serverless deploy: No services detected" >> $GITHUB_STEP_SUMMARY 
          ./load_tf_vars.sh

      - name: Import Internal State
        working-directory: ./infra-as-code/state
        run: |
          terraform -chdir="../terraform/environments/default" init -input=false
          export SKIP_TF_INIT=true
          echo "SKIP_TF_INIT=$SKIP_TF_INIT" >> $GITHUB_ENV
          ./import_internal_state.sh
        if: env.TFSTATE_BUCKET == ''
        id: import_internal_state

      - name: Terraform plan & apply
        working-directory: ./infra-as-code/terraform/environments/default
        run: |
          echo "SKIP_TF_INIT=$SKIP_TF_INIT"
          if [ $SKIP_TF_INIT = false ]; then
            terraform init -input=false
          fi
          terraform plan -out tf.plan
          terraform apply -input=false -auto-approve tf.plan

      - name: Export State
        working-directory: ./infra-as-code/state
        if: always()
        run: |
          ./push_state.sh
