name: "Deploy new environment"

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: string
        description: "New environment name"
      twilio_account_sid:
        required: true
        type: string
        description: "New environment account sid"
      twilio_api_key:
        required: true
        type: string
        description: "New environment account sid"
      twilio_api_secret:
        required: true
        type: string
        description: "New environment account sid"

jobs:
  deploy-new-environment:
    permissions: write-all
    name: Deploy new environment
    environment: ${{ github.event.inputs.environment }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm init -y
      - run: npm install --save libsodium-wrappers

      - uses: actions/github-script@v6
        id: create-environment
        name: Create github environment
        with:
          github-token: ${{ secrets.GH_API_PAT }}
          result-encoding: string
          retries: 3
          script: |
            github.rest.repos.createOrUpdateEnvironment({
              owner: "${{ github.actor }}",
              repo: "${{ github.event.repository.name }}".replace("${{github.actor}}/", ""),
              environment_name: "${{ inputs.environment }}",
              deployment_branch_policy: null
            });
            

      - uses: actions/github-script@v6
        id: push-environment-secrets
        name: Push environment secrets
        with:
          github-token: ${{ secrets.GH_API_PAT }}
          result-encoding: string
          retries: 3
          script: |
            const sodium = require('libsodium-wrappers');
            const inputs = ${{ toJSON(inputs) }}
            
            console.log(inputs)
            
            function encrypt(key, secret) {
              const binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL);
              const binsec = sodium.from_string(secret);
              const encBytes = sodium.crypto_box_seal(binsec, binkey);
              const output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL);
          
              return output;
            }
            
            sodium.ready.then(() => {
              const { key, key_id } = github.rest.actions.getEnvironmentPublicKey({
                repository_id: "${{ github.repository_id }}",
                environment_name: "${{ inputs.environment }}"
              }); 
              
              for (const secret in inputs) {
                github.rest.actions.createOrUpdateEnvironmentSecret({
                  repository_id: "${{ github.repository_id }}",
                  environment_name: "${{ github.event.repository.name }}",
                  secret_name: secret,
                  encrypted_value: encrypt(key, inputs[secret]),
                  key_id,
                });
              }
            });